(deftype (Lens a b) [
  get- (Fn [&a] b)
  set- (Fn [a b] a)
])

(deftype (Prism a b) [
  get- (Fn [&a] (Maybe b))
  set- (Fn [a b] a)
])

(defmodule Lens
  (defn get [l a] (~(get- l) a))
  (defn set [l a b] (~(set- l) a b))

  (defn compose [ab bc]
    (Lens.init
      (fn [a] (get bc &(get ab a)))
      (fn [a c]
        (let [inner (set bc (get ab &a) c)]
          (set ab a inner)))))

  (defn over [l p f]
    (let [transformed (~f (get l &p))]
      (set l p transformed)))

  (defn to-prism [l]
    (Prism.init
      (fn [a] (Maybe.Just (get l a)))
      @(set- l)))

  (defmacro for [t el]
    `(Lens.init
      (fn [a] (copy (%(Symbol.prefix t el) a)))
      %(Symbol.prefix t (Symbol.concat ['set- el]))))
)

(defmodule Prism
  (defn get [p a] (~(get- p) a))
  (defn set [p a b] (~(set- p) a b))

  (defn compose [ab bc]
    (Prism.init
      (fn [a]
        (match (get ab a)
          (Maybe.Nothing) (Maybe.Nothing)
          (Maybe.Just b) (get bc &b)))
      (fn [a c]
        (match (get ab &a)
          (Maybe.Nothing) a
          (Maybe.Just b)
            (let [inner (set bc b c)]
              (set ab a inner))))))

  (defn over [l p f]
    (match (get l &p)
      (Maybe.Nothing) p
      (Maybe.Just a)
        (let [transformed (~f a)]
          (set l p transformed))))

  (defmacro for [t el]
    (let [constructor (Symbol.prefix t el)]
      `(Prism.init
        (fn [a]
          (match-ref a
            (%constructor x) (Maybe.Just @x)
            _ (Maybe.Nothing)))
        (fn [a b] (%constructor b)))))

  (defmodule Array
    (defmacro for [idx]
      `(Prism.init
        (fn [a] (Array.nth a %idx))
        (fn [a b] (Array.aset a %idx b))))
  )

  (defmodule Map
    (defmacro for [k]
      `(Prism.init
        (fn [m] (Map.get-maybe m %k))
        (fn [m v] (Map.put m %k &v))))
  )
)
